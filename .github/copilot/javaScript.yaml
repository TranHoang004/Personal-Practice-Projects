# Specific Instructions for JavaScript Learning Path

# Khi người dùng hỏi về JavaScript, hãy tập trung vào các chủ đề sau và giải thích chi tiết.
# Đảm bảo mỗi chủ đề được trình bày với các giải thích rõ ràng và ví dụ minh họa.
focus_topics:
  - Cú pháp cơ bản: Biến (`var`, `let`, `const`), kiểu dữ liệu nguyên thủy (string, number, boolean, null, undefined, symbol, bigint) và đối tượng (object), toán tử số học, logic, so sánh, gán.
  - Cấu trúc điều khiển luồng: Câu lệnh điều kiện (`if/else`, `switch`), vòng lặp (`for`, `while`, `do-while`, `for...in`, `for...of`).
  - Hàm: Khai báo hàm truyền thống, hàm mũi tên (`arrow functions`), tham số hàm (vị trí, mặc định, còn lại `rest parameters`), gọi hàm, giá trị trả về.
  - Mảng: Khai báo mảng, truy cập phần tử, các phương thức phổ biến của mảng (`push`, `pop`, `shift`, `unshift`, `splice`, `slice`, `concat`), các phương thức lặp (`forEach`, `map`, `filter`, `reduce`), List Comprehensions (qua `map`/`filter`).
  - Đối tượng: Khai báo literal, truy cập thuộc tính (dot notation, bracket notation), thêm/sửa/xóa thuộc tính, các phương thức phổ biến của `Object` (`keys()`, `values()`, `entries()`).
  - DOM Manipulation (Document Object Model): Cách chọn phần tử HTML (bằng ID, class, tag name, query selectors), thay đổi nội dung (`textContent`, `innerHTML`), thuộc tính (`setAttribute`, `getAttribute`), style, thêm/xóa phần tử, xử lý sự kiện (`addEventListener`).
  - Lập trình bất đồng bộ: Giải thích chi tiết về Callbacks (callback hell), Promises (tạo, chuỗi `then`, `catch`, `finally`), Async/Await (cách sử dụng `async` và `await` để xử lý Promise dễ đọc và tuần tự hơn, xử lý lỗi với `try/catch`).
  - Các tính năng ES6+ (ECMAScript 2015 trở lên): Template Literals, Destructuring Assignment (cho mảng và đối tượng), Spread/Rest Operators, Modules (import/export), Classes (cú pháp, constructor, methods, inheritance).
  - Khái niệm về Scope: Global Scope, Function Scope, Block Scope (với `let`/`const`), Closure (khái niệm và ứng dụng).
  - `this` keyword: Giải thích các ngữ cảnh khác nhau của `this` trong hàm thông thường, hàm mũi tên, phương thức đối tượng, constructor, sự kiện.
  - **Tương tác với Web API (Fetching Data):** Cách gửi yêu cầu HTTP (GET, POST, PUT, DELETE) bằng `fetch` API hoặc thư viện như Axios, xử lý dữ liệu JSON trả về, xử lý lỗi mạng và HTTP status codes.
  - **Giới thiệu về Thiết kế API (nếu học Node.js/Backend với JS):** Các khái niệm cơ bản về RESTful API, HTTP methods và ý nghĩa của chúng, HTTP status codes phổ biến, định dạng dữ liệu JSON, xây dựng API cơ bản với Node.js/Express.js.

# Luôn cung cấp các ví dụ code minh họa chi tiết và dễ hiểu cho mỗi khái niệm.
provide_code_examples: true

# Luôn đề xuất các bài tập nhỏ hoặc thử thách để người học thực hành ngay lập tức
# sau khi một khái niệm được giải thích.
suggest_exercises: true